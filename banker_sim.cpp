#include <iostream>
using namespace std;

#define SUSPENDED	0
#define ACTIVE		1

struct state
{
	int resource[100];
	int claim[100][100];
	int alloc[100][100];
	int available[100];
}real,temp;


typedef struct Processes{
	int state;
} allProcesses[100];



bool requestExceedsAvailable(int request, int available, int r){
 	for (int j = 0; j < r; ++j)
 	{
 		if(request[j] > available[j])
 			return true;
 	}
 	return false;
}

void performRequest(int p, int r){
	/*generation of the request*/
	//choose one od the processes
	int	randomP = rand()%p;
	int request[r]; 	//request generated by the randomly choosen process
	for (int j = 0; j < r; ++j)
	{
		request[j] = rand()%(claim[randomP][j] - alloc[randomP][j]);
	}

	/**************************/	



	if(requestExceedsAvailable(request, real.available)){
		allProcesses[randomP].state = SUSPENDED;
	}else{
		for (int j = 0; j < r; ++j)
		{
			real.alloc[randomP][j] += request[j];
			real.available[j] -= request[j];
		}
	}
}

int main(){
	
	int t=0, p, r, Time;
	
	cout<<"Enter number of process(p) to simulate\n";
	cin>>p;
	cout<<"Enter number(r) of resources\n";
	cin>>r;
	
	for (int i = 0; i < p; ++i)
	{
		allProcesses[i].state = ACTIVE;
	}
	cout<<"Enter the resource(R) vector\n";
	for(int i=0;i<r;i++)
		cin >> real.resource[i];
	cout<<"Enter the amount of time to simulate\n";
	cin>>Time;
	
	while(t<Time){
		saveState();
		performRequest(p);
		if(!isSafe()){
		//	restoreState();
		}
		t++;
	}
	return  0;
}